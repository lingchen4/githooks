name: PR Reminder

on:
  pull_request:
    types: [opened, reopened]
    
  workflow_dispatch:


jobs:
  reminder:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install slack-sdk python-dateutil

    - name: Send reminder message
      env:
        SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
      run: |
        import os
        import json
        from slack_sdk import WebClient
        from slack_sdk.errors import SlackApiError
        from dateutil import parser
        from datetime import datetime, timezone, timedelta

        created_at = os.getenv('GITHUB_EVENT_PULL_REQUEST_CREATED_AT')
        pr_url = os.getenv('GITHUB_EVENT_PULL_REQUEST_HTML_URL')
        pr_title = os.getenv('GITHUB_EVENT_PULL_REQUEST_TITLE')
        slack_webhook_url = os.getenv('SLACK_WEBHOOK_URL')

        now = datetime.now(timezone.utc)
        created = parser.parse(created_at).replace(tzinfo=timezone.utc)
        minutes_open = (now - created) // timedelta(minutes=1)

        if minutes_open >= 10:
            client = WebClient(token=slack_webhook_url)

            message = f"Reminder: Pull request <{pr_url}|#{os.getenv('GITHUB_EVENT_NUMBER')} {pr_title}> has been open for {minutes_open} minutes."
            try:
                response = client.chat_postMessage(channel="#general", text=message)
                print(f"Sent reminder message: {message}")
            except SlackApiError as e:
                print(f"Error sending reminder message: {e}")
